% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/12-graph-conversion.R
\name{ceg2graph}
\alias{ceg2graph}
\alias{ceg2adjmat}
\alias{ceg2edges}
\alias{ceg2vert}
\alias{graph_from_ceg}
\title{CEG to graph struct}
\usage{
ceg2adjmat(x, ignore = x$name_unobserved, endnode = TRUE)

ceg2edges(x, ignore = x$name_unobserved, endnode = TRUE)

ceg2vert(x, ignore = x$name_unobserved, endnode = TRUE)

graph_from_ceg(x, ignore = x$name_unobserved, endnode = TRUE)
}
\arguments{
\item{x}{an object of class \code{\link{ceg}}.}

\item{ignore}{vector of stages which will be ignored and excluded,
by default the name of the unobserved stages stored in
\code{x$name_unobserved}.}

\item{endnode}{if the end node should be added.}
}
\value{
for \code{ceg2adjmat}: the adj matrix corresponding to the CEG

for \code{ceg2edges}: the edges list
corresponding to the CEG \code{x}

for \code{graph_from_ceg}: a graph object from the
\pkg{igraph} package.
}
\description{
Obtain the graph representation of a CEG, either as adjacency
matrix or as edges list or as \pkg{igraph} object.
}
\details{
This utility functions can be used to obtain the adjacency
matrix or the edge list structure
to build the CEG using a graph package (e.g. \pkg{igraph}).
We also provide a function \code{graph_from_ceg} to build directly the
graph structure as in \pkg{igraph}.
This can be useful, for example to plot the staged tree (see the examples).
}
\examples{
model <- stages_fbhc(full(PhDArticles))
model.ceg <- ceg(model)
### adjmat
A <- ceg2adjmat(model.ceg)
### edge list
E <- ceg2edges(model.ceg)
\dontrun{
library(igraph)
g <- graph_from_ceg(model.ceg)
### igraph plotting functions can be used 
plot(g, layout = layout.sugiyama)
### igraph object can be also plotted with ggplot2 and ggraph
library(ggraph)
library(ggplot2)
ggraph(g, "sugiyama") + 
 geom_edge_fan(aes(label = label, 
                   color = label,
                   label_pos = 0.5 + runif(length(label),-0.1,0.1)), 
               angle_calc = "along",show.legend = FALSE,check_overlap = TRUE,
               end_cap = circle(0.02, 'npc'),
               arrow = grid::arrow(angle = 25, 
                                   length = unit(0.025, "npc"),
                                   type = "closed")) +
 geom_node_point(aes(x = x, y = y, color = stage), size = 3, show.legend = FALSE) +
 ggforce::theme_no_axes() + coord_flip() + scale_y_reverse()
 }
}
